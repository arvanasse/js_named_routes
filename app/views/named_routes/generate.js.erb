<% if use_scope? %>
var <%= scope %> = {

host: <%= "#{request.protocol}#{request.host_with_port}".inspect %>,
<% else -%>
var js_named_routes_server_host = <%= "#{request.protocol}#{request.host_with_port}".inspect %>;
<% end -%>

<%= function_header("get_path", "segments, options, overrides") %>
	var extras = null;

	for (var property in overrides) {
		if (options[property] != null) {
			options[property] = overrides[property];
		}
		else {
			extras = extras ? extras : {};
			extras[property] = overrides[property]
		}
	}
	
	if (options["format"] == "") {
		segments = segments.replace("(.:format)?", "");
	}
	else {
		segments = segments.replace("(.:format)?", "."+options["format"]);
	}
	delete options["format"];

	for (var prop in options) {
		segments = segments.replace(":"+prop, options[prop]);
	}

	var query="";
	if (extras) {
		query += "?"
		for (var extra in extras) {
			query += extra + "=" + extras[extra] + "&";
		}
		query = query.substring(0, query.length-1);
	}

	var path = segments;
	while (path[path.length - 1] == "/") {
		path = path.substring(0, path.length - 1);
	}
	return path + query;
}<%= end_function %>

<%= function_header("get_url", "segments, options, overrides") %>
	return <%= scoped %><%= host %> + <%= scoped %>get_path(segments, options, overrides);
}<%= end_function %>

<% ActionController::Routing::Routes.named_routes.each do |name, route| -%>
// name: <%= name %>
// routes: <%= route %>

<%= function_header("#{name}_url", "overrides") %> return <%= scoped %><%= host %> + <%= scoped %><%= name %>_path(overrides) }<%= end_function %>

<%= function_header("#{name}_path", "overrides") %>
	<%- keys = route.significant_keys -%>
	var options = {<% keys.each_with_index do |key, ndx| %><%= key %>:<%= route.defaults[key].nil? ? "''" : "'#{route.defaults[key]}'" %><%= ndx == keys.size - 1 ? "" : "," %><% end %>};
	return <%= scoped %>get_path("<%= route.segments.collect(&:to_s) %>", options, overrides);
}<%= end_function %>

<% end -%>

<% if use_scope? %>
};
<% end %>
